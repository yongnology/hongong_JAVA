--------------------------------------------------
chapter 01 자바 시작하기
--------------------------------------------------

01-1 프로그래밍 언어와 자바

프로그리밍 언어로 작성한 파일을 소스(sourc) 파일이라고 한다.
소스 파일은 컴퓨터가 바로 이해할 수 없기 떄문에 컴파일(compile)과정을 통해서 0과 1로 이루어진
기계어로 번역한 후에 컴퓨터에서 사용한다.

자바의 특징
- 모든 운영체제에서 실행 가능하다.
- 객체 지향 프로그래밍
- 메모리 작동 정리
- 무료 라이브러리 풍부

자바 개발 도구 설치
- 자바 개발 도구(JDK : Java Development Kit) 설치를 해야한다.
- java jdk 11.0.13 다운
- JDK가 설치된 폴더(C:\Program Files\java\jdk-11.0.13)을 일반적으로 JAVA_HOME이라고 한다.
	JAVA_HOME 환경 변수를 만들고 JDK 설치 폴더를 등록하는 것이 좋다.
- 실행 방법 : 시작 - 제어판 - 시스템 및 보안 - 시스템 - 고급 시스템 설정

변수이름 : JAVA_HOME
변수 값 : JDK 설치 경로( 보통 C:\Program Files\java\jdk **.**.** )

시스템 변수 중
path 편집 - 새로만들기
%JAVA_HOME%bin
맨 위로 이동 후 확인.

6가지 키워드로 끝내는 핵심 포인트
- 기계어 : 컴퓨터(운영체제)가 이해하고 실행할 수 있는 0과 1로 이루어진 코드
- 프로그래밍 언어 : 사람이 기계어를 이해하는 것은 매우 어렵기 때문에 사람의 언어와
	기계어의 다리 역할을 한다. 종류로는 C, C++, JAVA, Python 등이 있다.
- 소스 파일 : 프로그래밍 언어로 작성된 파일.
- 컴파일 : 소스파일을 기계어로 번역하는 것. 이 역할을 담당하는 소프트웨어를 컴파일러라고 한다.
- JDK : 자바 개발 도구(Java Developmnet Kit) 자바로 프로그램을 개발할 수 있는 실행 환경(JVM)과
	개발 도구(컴파일러) 등을 제공한다.

--------------------------------------------------

01-2 이클립스 개발 환경 구축

이클립스는 무료로 사용할 수 있는 오픈 소스 통합 개발 환경(IDE : Integrated Development Environmnet)
https://www.eclipse.org 에서 다운로드 할 수 있다.

이클립스 초기화 방법
Workspace 로 지정된 폴더를 열어보면 .metadata 폴더가 있다.
만약 초기 상태로 돌아가고 싶으면 .metadata 폴더를 강제 삭제 후 재시작하면 된다.

4가지 키워드로 끝내는 핵심 포인트
- 이클립스
  : 무료로 사용할 수 있는 오픈 소스 통합 개발 환경(IDE : Integrated Development Environment).
  : IDE란 프로젝트 생성, 자동 코드 완성, 디버킹 등과 같이 개발에 필요한 여러 가지 기능을 통합적으로
    제공해주는 툴을 말한다.
- 워크스페이스
  : 이클립스 실행과 관련된 메타 데이터(metadata)와 프로젝트 폴더가 저장되는 폴더를 말한다.
- 뷰
  : 이클립스 내부에서 사용되는 작은 창을 말한다.
- 퍼스펙티브
  : 프로젝트를 개발할 때 유용하게 사용할 수 있는 뷰(view)들을 미리 묶어 이름을 붙여 놓은 것.

--------------------------------------------------

01-3 자바 프로그램 개발 과정

자바 프로그램은 완전한 기계어가 아닌,
바이트 코드(byte code) 파일(.class)로 구성된다.
바이트 코드 파일은 운영체제에서 바로 실행할 수 없고,
자바 가상 기계(JVM)라는 번역기가 필요하다.

public class Hello { 
					}

public class Hello : 클래스 선언부
Hello : 클래스 이름

중괄호 {}블록의 앞부분
public static void main(String[] args)를 메소드 선언부
괄호 () 바로 앞 main은 메소드 이름
java 명령어로 바이트 코드 파일을 실행하면
제일 먼저 main() 메소드를 찾아 블록 내부를 실행한다.
그래서 main()메소드를 프로그램 실행 진입점(entry point)라고 부른다.

주석
라인 주석 //
범위 주석 /*  */
도큐먼트 주석 /**  */
※ 주석 기호는 문자열(" ")내부에서는 작성할 수 없다.

세미콜론
실행문 끝에는 반드시 세미콜론(;)을 붙여서 실행문이 끝났음을 표시해 주어야 한다.

6가지 키워드로 끝내는 핵심 포인트
- 바이트 코드 파일
  : 자바 소스 파일을 javac 명령어로 컴파일한 파일을 말한다.
- JVM
  : 자바 가상 기계(Java Virtyal Machine)는 바이트 코드 파일을 운영체제를 위한 완전한 기계어로
    번역하고 실행한느 역할을 한다. JVM은 java명령어에 의해 구동된다.
- 클래스 선언
  : 자바 소스 파일은 클래스 선언부와 클래스 블록으로 구성된다. 이렇게 작성하는 것을 클래스 선언이라고 한다.
- main() 메소드
  : java 명령어로 바이트 코드 파일을 실행하면 제일 먼저 main() 메소드를 찾아 블록 내부를 실행한다.
    그래서 main() 메소드를 프로그램 실행 진입점(entry point)이라고 부른다.
- 주석
 : 주석은 프로그램 실행과는 상관없이 코드에 설명을 붙인 것을 말한다.
   주석은 컴파일 과정에서 무시되고 실행문만 바이트 코드로 번역된다.
- 실행문
  : 변수 선언, 값 저장, 메소드 호출에 해당하는 코드를 말한다.
    실행문 끝에는 세미콜론(;)을 붙여야 한다.

--------------------------------------------------
chapter 02 변수와 타입
--------------------------------------------------

02-1 변수

4가지 키워드로 끝내는 핵심 포인트
- 변수
  : 값을 저장할 수 있는 메모리 번지에 붙인 이름.
    변수를 통해 프로그램은 메모리 번지에 값을 저장하고 읽을 수 있다.
- 변수 선언
  : 변수에 어떤 타입의 데이터르 저장할지 그리고 변수 이름이 무엇인지를 결정하는 것
- 변수 사용
  : 변수의 값을 읽거나 변경하는 것을 말한다.
    변수는 출력문이나 연산식 내부에서 사용되어 변수에 저장된 값을 출력하거나 여산에 사용한다.
- 변수 사용 범위
  : 변수는 자신이 선언된 위치에서 자신이 속한 블록 내부까지만 사용이 가능하다.

--------------------------------------------------

02-2 기본타입

자바는 정수, 실수, 논리값을 저장할 수 있는 기본(primitive)타입을 제공한다.
정수 타입 : byte, char, short, int, long
실수 타입 : float, double
논리 타입 : boolean

char 타입은 음수 값을 가질 수 없다.

소스 코드에서 프로그래머에 의해 직접 입력된 값을 리터럴(literal)이라고 부른다.

ex) char에 대해
char var1 = 'A';
int var2 = 'A;
System.out.println(var1);	//A를 출력
System.out.println(var2);	//65를 출력

\ 를 이스케이프 문자 라고 부른다.

자주 사용하는 이스케이프 문자
\t : 탭만큼 띄움
\n : 줄 바꿈(라인 피드)
\r : 캐리지리턴
\" : " 출력
\' : ' 출력
\\ : \출력
\u16진수 : 16진수 유니코드에 해당하는 문자 출력

5가지 키워드로 끝내는 핵심 포인트
- 정수 타입
  : 정수를 저장할 수 있는 타입으로, byte, short, int, long 타입을 말한다.
- char 타입
  : 작은따옴표(')로 감싼 하나의 문자 리터럴을 저장할 수 있는 타입이다.
- String 타입
  : 큰따옴표(")로 감싼 문자열을 저장할 수 있는 타입이다.
- 실수 타입
  : 실수를 저장할 수 있는 타입으로 float, double 타입을 말한다.
- boolean 타입
  : 참과 거짓을 의미하는 true와 false를 저장할 수 있는 타입이다.

--------------------------------------------------
02-3 타입변환

자바에서 + 연산자는 두 가지 기능을 가지고 있다.
1) 덧셈, 2) 문자열 결합연산

ex 1) int value = 1+2+3		// 6출력
ex 2) String str = 1+"2"+"3" 	// 123출력

5가지 키워드로 끝내는 핵심 포인트
- 자동 타입 변환
  : 자동으로 타입이 변환되는 것을 의미.
    값의 허용 범위가 작은 타입이 허용 범위가 큰 타입으로 저장될 때 발생
- 강제 타입 변환 
  : 강제로 타입을 변환하는 것을 말한다.
    값의 허용 범위가 큰 타입을 허용 범위가 작은 타입으로 쪼개어서 저장하는 것을 의미
- 문자열 결합 연산
  : 문자열과 + 연산을 하면 다른 피연산자도 문자열로 저장되어 문자열 결합이 일어난다.
- Interger.parselnt()
  : 문자열을 정수 int 타입으로 변환한다.
- Double.parseDouble()
  : 문자열을 실수 double 타입으로 변환한다.

--------------------------------------------------

02-4 변수와 시스템 입출력

모니터 출력
System.out.println("출력 내용');

입력
System.in.read();

자주 사용되는 형식 문자열
정수
%d		: 정수
%6d		: 6자리 정수, 왼쪽 빈 자리 공백
%-6d		: 6자리 정수, 오른쪽 빈 자리 공백
%06d		: 6자리 정수, 왼쪽 빈 자리 0으로 채움

실수
%10.2f	: 소수점 이상 7자리, 소수점 이하 2자리. 왼쪽 빈 자리 공백
%-10.2f	: 소수점 이상 7자리, 소수점 이하 2자리. 오른쪽 빈 자리 공백
%010.2f	: 소수점 이상 7자리, 소수점 이하 2자리. 왼쪽 빈 자리 0채움

문자열
%s		: 문자열
%6s		: 6자리 문자열. 왼쪽 빈 자리 공백
%-6s		: 6자리 문자열. 오른쪽 빈 자리 공백

특수문자
\t 		: 탭(tab)
\n		: 줄 바꿈
%%		: %

5가지 키워드로 끝내는 핵심 포인트
- System.out.println()
  : 괄호에 주어진 매개값을 모니터로 출력하고 개행을 한다.
- System.out.print()
  : 괄호에 주어진 매개값을 모니터로 출력만 하고 개행하지 않는다.
- System.out.printf()
  : 괄호에 주어진 형식대로 출력한다.
- System.in.read()
  : 키보드에서 입력된 키코드를 읽는다.
- Scanner
  : System.in.read()는 키코드를 하나씩 읽기 때문에 2개 이상의 키가 조합된 한글을 읽을 수 없다.
키보드로부터 입력된 내용을 통 문자열로 읽기 위해서는 Scanner를 사용할 수 있다.

--------------------------------------------------
chaper 03 연산자
--------------------------------------------------

03-1 연산자와 연산식

연산자(Operator) 
  : 연산에 사용되는 표시나 기호
피연산자(Operand)
  : 연산자와 함꼐 연산되는 데이터
연산식(Expression)
  : 연산자와 피연산자를 이용하여 연산의 과정을 기술한 것

4가지 키워드로 끝내는 핵심 포인트
- 연산자
  : 연산의 종류를 결정짓는 기호를 말한다. 연산자의 종류는 산술(+, -, *, /, %),
    증감(++, --), 비교(==, !=, ···), 논리(&&, ||, ···), 대입(=, +=, =+, ···)등이 있다.
- 피연산자
  : 연산식에서 연산되는 데이터(값)을 말한다.
    예를 들어, 연산식 3 + x에서 3과 변수x가 피연산자이다.
- 연산 방향
  : 연산식에서 같은 종류의 d녀산자가 여러 개 사용 될 경우 왼쪽에서 오른쪽으로,
    또는 오른쪽에서 왼쪽으로 연산되는 방향이 있다. 대부분의 연산자는 왼쪽에서 오른쪽으로 연산이 되지만,
    증감(++, --)과 대입(=, +=, -=)은 오른쪽에서 왼쪽으로 연산된다.
- 연산 우선순위
  : 서로 다른 연산자들이 복합적으로 구성되면 우선적으로 연산되는 연산자가 있다.
    하지만 괄호 ()로 감산 연산이 최우선순위를 갖기 떄문에 복잡한 연산식에서 연산의 순서를
    정하고 싶을 때에는 괄호() 를 사용한다.

--------------------------------------------------

03-2 연산자의 종류

5가지 키워드로 끝내는 핵심 포인트
- 증감 연산자
  : ++, --를 말하며 변수의 값을 1씩 증가, 1씩 감소시킨다.
- 비교 연산자
  : ==, != 등을 말하며 값이 같은지, 다른지를 비교하고 boolean 값을 산출한다.
- 논리 연산자
  : &&, ||, ! 등을 말하며 논리곱, 논리합, 논리 부정을 수행하고 boolean 값을 산출한다.
- 대입 연산자
  : =, +=, -=등을 말하며 오른쪽의 값을 왼쪽에 대입하거나 연산 후 대입한다.
- 삼항 연산자
  : (조건식) ? A : B를 말하며 조건이 TRUE이면 A를 산출, FALSE면 B를 산출한다.

--------------------------------------------------
chaper 04 조건문과 반복문
--------------------------------------------------

04-1 조건문: if문, switch문

4가지 키워드로 끝내는 핵심 포인트
- if문
  : if(조건식) { ··· }을 말하며 조건식이 true가 되면 중괄호 내부를 실행한다.
- if-else문
  : if(조건식) { ··· } else if(조건식2) { ··· } else { ··· }를 말하며
    조건식1이 true가 되면 if 중괄호 내부를 실행하고, 조건식2가 true가 되면 else if 중괄호 내부를 실행.
    조건식1과 조건식2가 모두 false가 되면 else 중괄호 내부가 실행된다.
- switch문
  : switch(변수) { case 값1 : ··· case 값2 : ··· default: ··· }를 말하며
    변수의 값이 값1이면 첫 번쨰 case 코드를 실행하고, 값2이면 두 번쨰 case 코드를 실행한다.
    값1과 값2가 모두 아니면 default 코드를 실행한다.

--------------------------------------------------

04-2 반복문: for문, while문, do-while문

for문은 반복 횟수를 알고 있을 때 주로 사용하고,
while문은 조건에 따라 반복할 때 주로 사용된다.

5가지 키워드로 끝내는 핵심 포인트
- for문
  : for( 초기화식; 조건식; 증감식 ) { ··· }을 말하며 
    조건식이 true가 될 떄까지만 중괄호 내부를 반복한다. 반복할 때마다 증감식이 실행된다.
    초기화식은 조건식과 증감식에서 사용할 루프 카운터 변수를 초기화한다.
    주로 지정된 횟수만큼 반복할 때 사용한다.
- while문
  : while( 조건식 ) { ··· }을 말하며 조건식이 true 가 될 떄까지만 중괄호 내부를 반복실행.
- do-while문
  : do { ··· } while (조건식);을 말하며 먼저 do 중괄호 내부를 실행하고 그 다음 조건식이
    true가 되면 다시 중괄호 내부를 반복 실행한다.
- break문
  : for문, while문, do-while문 내부에서 실행되면 반복을 취소한다.
- continue문
  : for문, while문, do-while문 내부에서 실행되면 증감식 또는 조건식으로 돌아간다.

--------------------------------------------------
chapter 05 참조 타입
--------------------------------------------------

05-1 참조 타입과 참조 변수

6가지 키워드로 끝내는 핵심 포인트
- 기본 타입
  : byte, short, char, int, long, float, double, boolean 타입을 말하며 이들 타입의 변수에는 값 자체가 저장된다.
- 참조 타입
  : 기본 타입을 제외한 배열, 열거, 클래스, 인터페이스 등을 말한다.
    참조 타입의 변수에는 객체의 번지가 저장된다.
    번지로 객체를 참조한다는 의미에서 참조타입이라고 한다.
- 메모리 사용 영역
  : JVM은 운영체제에서 할당받은 메모리 영역을 메소드 영역, 힙 영역, 스택 영역으로 구분해서 사용한다.
    메소드 영역에는 정적 필드, 상수, 메소드 코드, 생성자 코드가 위치하며, 힙 영역에는 객체가 생성된다.
    그리고 스택 영역에는 변수가 생성된다.
- 번지 비교
  : 비교 연산자(==, !=)가 기본 타입에에서 사용되면 값을 비교하지만,
    참조 타입에서 사용되면 번지를 비교한다. ==이 true가 나오면 같은 객체를 참조한다는 뜻이고
    false가 나오면 다른 객체를 참조한다는 뜻이다.
- null
  : 참조 타입 변수는 객체를 참조하지 않는다는 뜻으로 null 값을 가질 수 있다.
    null 값도 초기값으로 사용할 수 있기 떄문에 null로 초기화된 참조 변수는 스택 영역에 생성된다.
- NullPointerException
  : 참조 변수가 null을 가지고 있을 경우에는, 참조 객체가 없으므로 참조 변수를 통해 객체를 사용할 수 없다.
    만약 null인 참조 변수를 통해 있지도 않은 객체의 필드나 메소드를 사용하면 NullPointerException이 발생한다.

--------------------------------------------------

05-2 배열

7가지 키워드로 끝내는 핵심 포인트
- 배열
  : 같은 타입의 데이터를 연속된 공간에 나열하고, 각 데이터에 인덱스(index)를 부여해 놓은 자료구조
- 인덱스
  : 배열 항목에 붙인 번호를 말한다. 0부터 시작하며 0~(배열길이-1)까지의 범위를 갖는다.
- 배열 선언
  : 변수 선언과 비슷한데, 대괄호가 추가되어 타입[] 변수; 형태로 선언된다.
    int[] scores는 int 배열을 선언한다. 여기서 scores는 배열 변수라고 부른다.
- 배열 생성
  : 배열을 생성하는 방법은 2가지.
    하나는 { 값1. 값2. 값3, ·· } 처럼 값 목록으로 생성하는 방법
    다른 하나는 new 타입[길이];로 생성하는 방법이 있다.
- 배열 길이
  : 배열에 저장될 수 있는 항목(값)의 수를 말한다. 배열의 length 필드에 저장되어 있기 떄문에
    변수.length로 배열 길이를 읽을 수 있다.
- 다차원 배열
  : 배열 항목(값)이 또 다른 배열을 참조할 때 이것을 다차원 배열이라고 한다.
    다차원 배열의 선언과 생성 방법은 타입[][] 변수 = new 타입[길이1][길이2]; 이다.
    변수.length는 1차우너 배열의 길이1이 되고,
    변수[인덱스].length는 해당 항목이 참조하는 2차원 배열의 길이2를 말한다.
- 향상된 for문
  : for(타이 변수 : 배열) { ··· }을 말한다.
    향상된 for문은 반복 실행을 위해 루프 카운터 변수와 증감식을 사용하지 않는다.
    배열의 항목 개수만큼 반복하고, 자동적으로 for문을 빠져나간다.
    반복할 때마다 변수에는 배열에서 가져온 항목이 저장된다.

--------------------------------------------------

05-3 열거타입

4가지 키워드로 끝내느 핵심 포인트
- 열거타입
  : 열거 타입은 몇 가지로 제한된 상수를 가지는 타입을 말한다.
- 열거 타입 선언
  : enum 타입 { 상수, 상수 ··· } 형태로 열거 타입을 선어한다.
    예를 들어 enum Week { MONDAY, ··· , SUNDAY } 형태를 가진다.
- 열거 상수
  : 열거 타입 선언 떄 주어진 상수를 말하며 타입.상수 형태로 사용한다.
    예를 들어 Week 열거 타입의 상수 MONDAY는 Week.MONDAY로 사용한다.
- 열거 타입 변수
  : 열거 타입으로 선언된 변수를 말한다. 열거 타입 변수에는 열거 상수 중 하나가 대입된다.
    예를 들어 Week today = Week.FRIDAY;에서 today가 열거 타입 변수이다.

--------------------------------------------------
 chapter 06 클래스
--------------------------------------------------

06-1 객체 지향 프로그래밍

객체 간의 관계
예시)
1) 상속 관계
  : 상위(부모) 객체를 기바능로 하위(자식)객체르 생성하는 관계
	- 기계와 자동차는 상속관계
2) 사용 관계
  : 객체 간의 상호작용을 의미
	- 사람과 자동차는 사용관계
3) 집합 관계
  : 객체는 하나의 부품이고, 하나는 완성품에 해당한다.
	- 부품과 자동차는 집합관계

클래스 용도.
	1) 라이브러리 2) 실행용

클래스의 구성 멤버
	1) 필드(Field)
		: 객체의 데이터가 저장되는 곳
	2) 생성자(Constructor)
		: 객체 생성 시 초기화 역할 담당
		: new 연산자로 호출되는 특별한 중괄호 { } 블록.
	3) 메소드(Method)
		: 객체의 동작에 해당하는 중괄호 { } 블록
		: 객체 간의 데이터를 전달하는 수단

6가지 키워드로 끝내는 핵심 포인트
- 클래스
  : 객체를 만들기 위한 설계도
- 객체
  : 클래스로부터 생성되며 'new 클래스()'로 생성한다.
- new 연산자
  : 객체 생성 연산자이며, 생성자를 호출하고 객체 생성 번지를 리턴한다.
- 클래스 변수
  : 클래스로 선언한 변수를 말하며 해당 클래스의 객체 번지가 저장된다.
- 인스턴스
  : 클래스로부터 만들어진 객체를 해당 클래스의 인스턴스라고 한다.
    객체는 클래스의 인스턴스이다.
- 클래스 맴버
  : 클래스에 선언되는 맴버는 필드, 생성자, 메소드가 있다.

--------------------------------------------------

06-2 필드

필드(field)는 객체의 고유 데이터, 객체가 가져야 할 부품, 객체의 현재 상태를 저장하는 곳이다.
초기값이 지정되지 않은 필드는 객체 생성 시 자동으로 기본 초기값으로 설정된다.
필드를 사용한다는 것은 필드값을 읽고 변경하는 작업을 말한다.

2가지 키워드로 끝내느 핵심 포인트
- 필드 선언
  : 클래스 중괄호 { } 블록 어디서든 선언하거나, 생성자와 메소드 내부에서는 선언할 수 없다.
- 필드 사용
  : 클래스 내부의 생성자와 메소드에서 바로 사용이 가능하나,
    클래스 외부에서 사용할 경우에는 반드시 객체를 생성하고 참조 변수를 통해 사용해야 한다.

--------------------------------------------------

06-3 생성자

6가지 키워드로 끝내는 핵심 포인트
- 기본 생성자
  : 클래스 선언 시 컴파일러에 의해 자동으로 추가되는 생성자이다.
- 생성자 선언
  : 클래스로부터 객체를 생성할 때 호출되는 생성자를 명시적으로 선언할 수 있다.
- 매개 변수
  : 생성자 호출 시 값을 전달받기 위해 선언되는 변수를 말한다.
- 객체 초기화
  : 객체를 사용하기 전에 준비하는 과정으로 필드를 선언할 때 초기화하거나 생성자 내부에서
    필드값을 초기화할 수 있으며, 메소드를 호출하는 내용으로 구성된다.
- 오버로딩
  : 매개 변수를 달리하는 생성자를 여러 개 선언하는 것을 말한다.
- this()
  : 객체 자신의 또 다른 생성자를 호출할 때 사용한다.

--------------------------------------------------

06-4 메소드

return문 이후의 실행문은 반복문 아닌이상 실행되지 않는다.

클래스 외부에서 메소드를 호출할 경우에는 우선 클래스로부터 객체를 생성한 뒤
참조 변수를 이요해서 메소드를 호출해야 한다.

6가지 키워드로 끝내는 핵심 포인트
- 선언부
  : 메소드 선언부는 리턴 타입, 메소드 이름, 매개 변수 선언 부분을 말한다.
- void
  : 리턴값이 없는 메소드는 리턴 타입으로 void를 기술해야 한다.
- 매개 변수
  : 메소드 호출 시 제공되는 매개값은 메소드 선언부의 매개 변수에 차례대로 대입되어,
    메소드 블록 실행 시 이용된다.
- 리턴문
  : 메소드 선언부에 리턴 타입이 있다면 리턴값을 지정하기 위해 return 문이 반드시 있어야 한다.
    리턴 타입이 void라면 return문은 필요없지만,
    메소드 실행 종료를 위해 사용할 수도 있다.
- 호출
  : 메소드를 실행하려면 '메소드 이름(매개값, ...)'형태로 호출해야 한다.
- 오버로딩
  : 클래스 내에 같은 이름의 메소드를 여러 개 선언하는 것을 메소드 오버로딩(overloading)이라고 한다.
    메소드 오버로딩의 조건은 매개 변수의 타입, 개수, 순서 중 하나가 달라야 한다는 점이다.

--------------------------------------------------

